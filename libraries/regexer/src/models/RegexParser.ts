/* eslint-disable */

import * as RegexTypes from "./parserTypes"
export * as RegexTypes from "./parserTypes"



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // Generated by Peggy 3.0.2.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";

// @ts-ignore
function peg$subclass(child, parent) {
// @ts-ignore
  function C() { this.constructor = child; }
// @ts-ignore
  C.prototype = parent.prototype;
// @ts-ignore
  child.prototype = new C();
}

// @ts-ignore
function peg$SyntaxError(message, expected, found, location) {
// @ts-ignore
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
// @ts-ignore
  if (Object.setPrototypeOf) {
// @ts-ignore
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
// @ts-ignore
  self.expected = expected;
// @ts-ignore
  self.found = found;
// @ts-ignore
  self.location = location;
// @ts-ignore
  self.name = "SyntaxError";
// @ts-ignore
  return self;
}

// @ts-ignore
peg$subclass(peg$SyntaxError, Error);

// @ts-ignore
function peg$padEnd(str, targetLength, padString) {
// @ts-ignore
  padString = padString || " ";
// @ts-ignore
  if (str.length > targetLength) { return str; }
// @ts-ignore
  targetLength -= str.length;
// @ts-ignore
  padString += padString.repeat(targetLength);
// @ts-ignore
  return str + padString.slice(0, targetLength);
}

// @ts-ignore
peg$SyntaxError.prototype.format = function(sources) {
// @ts-ignore
  var str = "Error: " + this.message;
// @ts-ignore
  if (this.location) {
// @ts-ignore
    var src = null;
// @ts-ignore
    var k;
// @ts-ignore
    for (k = 0; k < sources.length; k++) {
// @ts-ignore
      if (sources[k].source === this.location.source) {
// @ts-ignore
        src = sources[k].text.split(/\r\n|\n|\r/g);
// @ts-ignore
        break;
      }
    }
// @ts-ignore
    var s = this.location.start;
// @ts-ignore
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
      ? this.location.source.offset(s)
// @ts-ignore
      : s;
// @ts-ignore
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
    if (src) {
// @ts-ignore
      var e = this.location.end;
// @ts-ignore
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
// @ts-ignore
      var line = src[s.line - 1];
// @ts-ignore
      var last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
      var hatLen = (last - s.column) || 1;
// @ts-ignore
      str += "\n --> " + loc + "\n"
// @ts-ignore
          + filler + " |\n"
// @ts-ignore
          + offset_s.line + " | " + line + "\n"
// @ts-ignore
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
// @ts-ignore
          + peg$padEnd("", hatLen, "^");
// @ts-ignore
    } else {
// @ts-ignore
      str += "\n at " + loc;
    }
  }
// @ts-ignore
  return str;
};

// @ts-ignore
peg$SyntaxError.buildMessage = function(expected, found) {
// @ts-ignore
  var DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
    literal: function(expectation) {
// @ts-ignore
      return "\"" + literalEscape(expectation.text) + "\"";
    },

// @ts-ignore
    class: function(expectation) {
// @ts-ignore
      var escapedParts = expectation.parts.map(function(part) {
// @ts-ignore
        return Array.isArray(part)
// @ts-ignore
          ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
          : classEscape(part);
      });

// @ts-ignore
      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

// @ts-ignore
    any: function() {
// @ts-ignore
      return "any character";
    },

// @ts-ignore
    end: function() {
// @ts-ignore
      return "end of input";
    },

// @ts-ignore
    other: function(expectation) {
// @ts-ignore
      return expectation.description;
    }
  };

// @ts-ignore
  function hex(ch) {
// @ts-ignore
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

// @ts-ignore
  function literalEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/"/g,  "\\\"")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function classEscape(s) {
// @ts-ignore
    return s
// @ts-ignore
      .replace(/\\/g, "\\\\")
// @ts-ignore
      .replace(/\]/g, "\\]")
// @ts-ignore
      .replace(/\^/g, "\\^")
// @ts-ignore
      .replace(/-/g,  "\\-")
// @ts-ignore
      .replace(/\0/g, "\\0")
// @ts-ignore
      .replace(/\t/g, "\\t")
// @ts-ignore
      .replace(/\n/g, "\\n")
// @ts-ignore
      .replace(/\r/g, "\\r")
// @ts-ignore
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
// @ts-ignore
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

// @ts-ignore
  function describeExpectation(expectation) {
// @ts-ignore
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

// @ts-ignore
  function describeExpected(expected) {
// @ts-ignore
    var descriptions = expected.map(describeExpectation);
// @ts-ignore
    var i, j;

// @ts-ignore
    descriptions.sort();

// @ts-ignore
    if (descriptions.length > 0) {
// @ts-ignore
      for (i = 1, j = 1; i < descriptions.length; i++) {
// @ts-ignore
        if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
          descriptions[j] = descriptions[i];
// @ts-ignore
          j++;
        }
      }
// @ts-ignore
      descriptions.length = j;
    }

// @ts-ignore
    switch (descriptions.length) {
// @ts-ignore
      case 1:
// @ts-ignore
        return descriptions[0];

// @ts-ignore
      case 2:
// @ts-ignore
        return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
      default:
// @ts-ignore
        return descriptions.slice(0, -1).join(", ")
// @ts-ignore
          + ", or "
// @ts-ignore
          + descriptions[descriptions.length - 1];
    }
  }

// @ts-ignore
  function describeFound(found) {
// @ts-ignore
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

// @ts-ignore
  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  var peg$FAILED = {};
// @ts-ignore
  var peg$source = options.grammarSource;

// @ts-ignore
  var peg$startRuleFunctions = { start: peg$parsestart };
// @ts-ignore
  var peg$startRuleFunction = peg$parsestart;

// @ts-ignore
  var peg$c0 = "/";
  var peg$c1 = "m";
  var peg$c2 = "g";
  var peg$c3 = "i";
  var peg$c4 = "y";
  var peg$c5 = "u";
  var peg$c6 = "v";
  var peg$c7 = "s";
  var peg$c8 = "d";
  var peg$c9 = "\\";
  var peg$c10 = ".";
  var peg$c11 = "+";
  var peg$c12 = "*";
  var peg$c13 = "?";
  var peg$c14 = "[";
  var peg$c15 = "^";
  var peg$c16 = "]";
  var peg$c17 = "$";
  var peg$c18 = "(";
  var peg$c19 = ")";
  var peg$c20 = "{";
  var peg$c21 = "}";
  var peg$c22 = "=";
  var peg$c23 = "!";
  var peg$c24 = "<";
  var peg$c25 = ">";
  var peg$c26 = "|";
  var peg$c27 = ":";
  var peg$c28 = "-";
  var peg$c29 = "\\x";
  var peg$c30 = "?:";
  var peg$c31 = "?<";
  var peg$c32 = "(?";
  var peg$c33 = ",";

  var peg$r0 = /^[^\]\\]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[\0-\xFF]/;
  var peg$r3 = /^[.+*?\^$()[\]{}|\\]/;
  var peg$r4 = /^[^.+*?\^$()[\]{}|\\]/;
  var peg$r5 = /^[0-9a-fA-F]/;
  var peg$r6 = /^[a-zA-Z]/;

  var peg$e0 = peg$literalExpectation("/", false);
  var peg$e1 = peg$literalExpectation("m", false);
  var peg$e2 = peg$literalExpectation("g", false);
  var peg$e3 = peg$literalExpectation("i", false);
  var peg$e4 = peg$literalExpectation("y", false);
  var peg$e5 = peg$literalExpectation("u", false);
  var peg$e6 = peg$literalExpectation("v", false);
  var peg$e7 = peg$literalExpectation("s", false);
  var peg$e8 = peg$literalExpectation("d", false);
  var peg$e9 = peg$classExpectation(["]", "\\"], true, false);
  var peg$e10 = peg$literalExpectation("\\", false);
  var peg$e11 = peg$literalExpectation(".", false);
  var peg$e12 = peg$literalExpectation("+", false);
  var peg$e13 = peg$literalExpectation("*", false);
  var peg$e14 = peg$literalExpectation("?", false);
  var peg$e15 = peg$literalExpectation("[", false);
  var peg$e16 = peg$literalExpectation("^", false);
  var peg$e17 = peg$literalExpectation("]", false);
  var peg$e18 = peg$literalExpectation("$", false);
  var peg$e19 = peg$literalExpectation("(", false);
  var peg$e20 = peg$literalExpectation(")", false);
  var peg$e21 = peg$literalExpectation("{", false);
  var peg$e22 = peg$literalExpectation("}", false);
  var peg$e23 = peg$literalExpectation("=", false);
  var peg$e24 = peg$literalExpectation("!", false);
  var peg$e25 = peg$literalExpectation("<", false);
  var peg$e26 = peg$literalExpectation(">", false);
  var peg$e27 = peg$literalExpectation("|", false);
  var peg$e28 = peg$literalExpectation(":", false);
  var peg$e29 = peg$literalExpectation("-", false);
  var peg$e30 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e31 = peg$classExpectation([["\0", "\xFF"]], false, false);
  var peg$e32 = peg$classExpectation([".", "+", "*", "?", "^", "$", "(", ")", "[", "]", "{", "}", "|", "\\"], false, false);
  var peg$e33 = peg$classExpectation([".", "+", "*", "?", "^", "$", "(", ")", "[", "]", "{", "}", "|", "\\"], true, false);
  var peg$e34 = peg$literalExpectation("\\x", false);
  var peg$e35 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e36 = peg$literalExpectation("?:", false);
  var peg$e37 = peg$literalExpectation("?<", false);
  var peg$e38 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e39 = peg$literalExpectation("(?", false);
  var peg$e40 = peg$literalExpectation(",", false);
// @ts-ignore

  var peg$f0 = function(type) {
// @ts-ignore
    	const data = { modifiers: type?.modifiers };
// @ts-ignore
        return handler.handle(data, type?.elements, States.ROOT);
    };// @ts-ignore

  var peg$f1 = function(elements) {
// @ts-ignore
    	return { 
// @ts-ignore
        	modifiers: Modifiers.NONE,
// @ts-ignore
        	elements 
        }
    };// @ts-ignore

  var peg$f2 = function(elements, modifiers) {
// @ts-ignore
    	return {
// @ts-ignore
        	modifiers,
// @ts-ignore
        	elements
        }
    };// @ts-ignore

  var peg$f3 = function(modifiers) {
// @ts-ignore
    	let alreadyUsed = {};
        
// @ts-ignore
        let parsable = true;
// @ts-ignore
		modifiers.forEach((character) => {
// @ts-ignore
        	if(Object.hasOwn(alreadyUsed, character))
            {
// @ts-ignore
            	parsable = false;
// @ts-ignore
            	return;
            }
            
// @ts-ignore
         	alreadyUsed[character] = true;
        });
        
// @ts-ignore
        return parsable;
    };// @ts-ignore

  var peg$f4 = function(modifiers) {
// @ts-ignore
    	return modifiers.reduce((x,y) => x | Modifiers[y], 0);
    };// @ts-ignore

  var peg$f5 = function() {// @ts-ignore
 return handler.handle({}, [], States.NULL, Flags.NONE); };// @ts-ignore

  var peg$f6 = function(digit) {// @ts-ignore
 return parseInt(digit, 10); };// @ts-ignore

  var peg$f7 = function(digits) {// @ts-ignore
 return parseInt(digits.join(""), 10); };// @ts-ignore

  var peg$f8 = function(escaped) {// @ts-ignore
 return escaped; };// @ts-ignore

  var peg$f9 = function(first, second) {
// @ts-ignore
    	return first.charCodeAt(0) <= second.charCodeAt(0);
    };// @ts-ignore

  var peg$f10 = function(first, second) {
// @ts-ignore
    	let stringCharacters = [];
        
// @ts-ignore
        const start = first.charCodeAt(0);
// @ts-ignore
        const end = second.charCodeAt(0);
        
// @ts-ignore
        for(let i = start; i <= end; i++)
// @ts-ignore
            stringCharacters.push(String.fromCharCode(i));
    
// @ts-ignore
    	return stringCharacters;
    };// @ts-ignore

  var peg$f11 = function(code) {
// @ts-ignore
    	return String.fromCharCode(parseInt(code.join(''), 16));
    };// @ts-ignore

  var peg$f12 = function(character) {
// @ts-ignore
    	return handler.handle({ chr: character }, [], States.PRIMITIVE, Flags.NONE);
    };// @ts-ignore

  var peg$f13 = function(name) {
// @ts-ignore
                    return name.join('');
                };// @ts-ignore

  var peg$f14 = function(type, elements) {
// @ts-ignore
        const detailedType = 
// @ts-ignore
            type == undefined ? 'C' : 
// @ts-ignore
            type == '?:' ? 'NC' :
// @ts-ignore
            'N';
    
// @ts-ignore
        const data = {
// @ts-ignore
            detailedType,
// @ts-ignore
            name: detailedType == 'N' ? type : undefined
        };
      
// @ts-ignore
	    return handler.handle(data, elements, States.GROUP);
    };// @ts-ignore

  var peg$f15 = function(behind, type, elements) {
// @ts-ignore
    	return {
// @ts-ignore
        	type: "lookaround",
        	// P - positive, N - negative, B - behind, F - forward
// @ts-ignore
            detailedType: (type == '=' ? 'P' : 'N') + (behind == '<' ? 'B' : 'F'),
// @ts-ignore
          	elements
        };
    };// @ts-ignore

  var peg$f16 = function(elements) {
// @ts-ignore
    	return handler.handle({}, elements, States.OPTION, Flags.NONE);
    };// @ts-ignore

  var peg$f17 = function(element) {
// @ts-ignore
        return handler.handle({}, [element], States.OPTIONAL);
    };// @ts-ignore

  var peg$f18 = function(element, start, end) {// @ts-ignore
 return start <= end };// @ts-ignore

  var peg$f19 = function(element, start, end) {// @ts-ignore
 return end != undefined ? parseInt(end, 10) : undefined; };// @ts-ignore

  var peg$f20 = function(element, start, end) { 
// @ts-ignore
                return {
// @ts-ignore
                    start,
// @ts-ignore
                    end
                }
            };// @ts-ignore

  var peg$f21 = function(element, detailedType, lazy) {
// @ts-ignore
    	const start = 
// @ts-ignore
        	detailedType == '*' ? 0 :
// @ts-ignore
            detailedType == '+' ? 1 : 
// @ts-ignore
            detailedType?.start;
            
// @ts-ignore
        const end =
// @ts-ignore
        	detailedType?.end != undefined ? detailedType?.end : undefined;
    
// @ts-ignore
    	const data = {
// @ts-ignore
            start,
// @ts-ignore
            end,
// @ts-ignore
            lazy: lazy != undefined
        };
        
// @ts-ignore
        const iterationType = 
// @ts-ignore
            detailedType == '*' ? States.ITERATION_ZERO :
// @ts-ignore
            detailedType == '+' ? States.ITERATION_ONE :
// @ts-ignore
            States.ITERATION_RANGE;

// @ts-ignore
        return handler.handle(data, [element], iterationType);
    };// @ts-ignore

  var peg$f22 = function(negation, elements) {
// @ts-ignore
    	return handler.handle(
// @ts-ignore
        	{ neg: negation === '^'}, 
// @ts-ignore
            elements, 
// @ts-ignore
            negation === '^' ? States.N_LIST : States.P_LIST, 
// @ts-ignore
            Flags.NONE
        );
    };
// @ts-ignore
  var peg$currPos = 0;
// @ts-ignore
  var peg$savedPos = 0;
// @ts-ignore
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  var peg$maxFailPos = 0;
// @ts-ignore
  var peg$maxFailExpected = [];
// @ts-ignore
  var peg$silentFails = 0;

// @ts-ignore
  var peg$result;

// @ts-ignore
  if ("startRule" in options) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase) {
// @ts-ignore
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description: description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    var details = peg$posDetailsCache[pos];
// @ts-ignore
    var p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      p = pos - 1;
// @ts-ignore
      while (!peg$posDetailsCache[p]) {
// @ts-ignore
        p--;
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    var startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    var endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    var res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column
      }
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parsestart() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsemoded_start();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parsegeneral_start();
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f0(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegeneral_start() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseany_element();
// @ts-ignore
    while (s2 !== peg$FAILED) {
// @ts-ignore
      s1.push(s2);
// @ts-ignore
      s2 = peg$parseany_element();
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f1(s1);
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemoded_start() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
      s1 = peg$c0;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$parseany_element();
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$parseany_element();
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
        s3 = peg$c0;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parsemodifiers();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f2(s2, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsemodifiers() {
// @ts-ignore
    var s0, s1, s2, s3;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = [];
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 109) {
// @ts-ignore
      s3 = peg$c1;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
// @ts-ignore
    if (s3 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 103) {
// @ts-ignore
        s3 = peg$c2;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 105) {
// @ts-ignore
          s3 = peg$c3;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e3); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 121) {
// @ts-ignore
            s3 = peg$c4;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
              s3 = peg$c5;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 118) {
// @ts-ignore
                s3 = peg$c6;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 115) {
// @ts-ignore
                  s3 = peg$c7;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s3 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
// @ts-ignore
                if (s3 === peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 100) {
// @ts-ignore
                    s3 = peg$c8;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s3 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e8); }
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 109) {
// @ts-ignore
        s3 = peg$c1;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 103) {
// @ts-ignore
          s3 = peg$c2;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 105) {
// @ts-ignore
            s3 = peg$c3;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e3); }
          }
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 121) {
// @ts-ignore
              s3 = peg$c4;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s3 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
// @ts-ignore
            if (s3 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 117) {
// @ts-ignore
                s3 = peg$c5;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s3 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e5); }
              }
// @ts-ignore
              if (s3 === peg$FAILED) {
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 118) {
// @ts-ignore
                  s3 = peg$c6;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s3 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
// @ts-ignore
                if (s3 === peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 115) {
// @ts-ignore
                    s3 = peg$c7;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s3 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
// @ts-ignore
                  if (s3 === peg$FAILED) {
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 100) {
// @ts-ignore
                      s3 = peg$c8;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s3 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e8); }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
// @ts-ignore
    peg$savedPos = peg$currPos;
// @ts-ignore
    s3 = peg$f3(s2);
// @ts-ignore
    if (s3) {
// @ts-ignore
      s3 = undefined;
// @ts-ignore
    } else {
// @ts-ignore
      s3 = peg$FAILED;
    }
// @ts-ignore
    if (s3 !== peg$FAILED) {
// @ts-ignore
      s1 = s2;
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f4(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegeneral() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parselist();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseprimitive();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parselookaround();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsegroup();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseEOS();
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$parseSOS();
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseany_element() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseoption();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseiteration();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseoptional();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parsegeneral();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseto_iterate() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseprimitive();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsegroup();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parselist();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseto_option() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseiteration();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseoptional();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parsegeneral();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseto_optional() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parseprimitive();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsegroup();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parselist();
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseto_list() {
// @ts-ignore
    var s0;

// @ts-ignore
    s0 = peg$parserange_ascii();
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parsehexadecimal_ascii();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s0 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseis_escaped();
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseescaped_primitive() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
      s0 = peg$c9;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s0 = peg$c10;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s0 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
          s0 = peg$c11;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s0 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
            s0 = peg$c12;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s0 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
              s0 = peg$c13;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s0 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
                s0 = peg$c14;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s0 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e15); }
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
                  s0 = peg$c15;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s0 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e16); }
                }
// @ts-ignore
                if (s0 === peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
                    s0 = peg$c16;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s0 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e17); }
                  }
// @ts-ignore
                  if (s0 === peg$FAILED) {
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
                      s0 = peg$c17;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s0 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e18); }
                    }
// @ts-ignore
                    if (s0 === peg$FAILED) {
// @ts-ignore
                      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
                        s0 = peg$c18;
// @ts-ignore
                        peg$currPos++;
// @ts-ignore
                      } else {
// @ts-ignore
                        s0 = peg$FAILED;
// @ts-ignore
                        if (peg$silentFails === 0) { peg$fail(peg$e19); }
                      }
// @ts-ignore
                      if (s0 === peg$FAILED) {
// @ts-ignore
                        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
                          s0 = peg$c19;
// @ts-ignore
                          peg$currPos++;
// @ts-ignore
                        } else {
// @ts-ignore
                          s0 = peg$FAILED;
// @ts-ignore
                          if (peg$silentFails === 0) { peg$fail(peg$e20); }
                        }
// @ts-ignore
                        if (s0 === peg$FAILED) {
// @ts-ignore
                          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
                            s0 = peg$c20;
// @ts-ignore
                            peg$currPos++;
// @ts-ignore
                          } else {
// @ts-ignore
                            s0 = peg$FAILED;
// @ts-ignore
                            if (peg$silentFails === 0) { peg$fail(peg$e21); }
                          }
// @ts-ignore
                          if (s0 === peg$FAILED) {
// @ts-ignore
                            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                              s0 = peg$c21;
// @ts-ignore
                              peg$currPos++;
// @ts-ignore
                            } else {
// @ts-ignore
                              s0 = peg$FAILED;
// @ts-ignore
                              if (peg$silentFails === 0) { peg$fail(peg$e22); }
                            }
// @ts-ignore
                            if (s0 === peg$FAILED) {
// @ts-ignore
                              if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
                                s0 = peg$c22;
// @ts-ignore
                                peg$currPos++;
// @ts-ignore
                              } else {
// @ts-ignore
                                s0 = peg$FAILED;
// @ts-ignore
                                if (peg$silentFails === 0) { peg$fail(peg$e23); }
                              }
// @ts-ignore
                              if (s0 === peg$FAILED) {
// @ts-ignore
                                if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
                                  s0 = peg$c23;
// @ts-ignore
                                  peg$currPos++;
// @ts-ignore
                                } else {
// @ts-ignore
                                  s0 = peg$FAILED;
// @ts-ignore
                                  if (peg$silentFails === 0) { peg$fail(peg$e24); }
                                }
// @ts-ignore
                                if (s0 === peg$FAILED) {
// @ts-ignore
                                  if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
                                    s0 = peg$c24;
// @ts-ignore
                                    peg$currPos++;
// @ts-ignore
                                  } else {
// @ts-ignore
                                    s0 = peg$FAILED;
// @ts-ignore
                                    if (peg$silentFails === 0) { peg$fail(peg$e25); }
                                  }
// @ts-ignore
                                  if (s0 === peg$FAILED) {
// @ts-ignore
                                    if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
                                      s0 = peg$c25;
// @ts-ignore
                                      peg$currPos++;
// @ts-ignore
                                    } else {
// @ts-ignore
                                      s0 = peg$FAILED;
// @ts-ignore
                                      if (peg$silentFails === 0) { peg$fail(peg$e26); }
                                    }
// @ts-ignore
                                    if (s0 === peg$FAILED) {
// @ts-ignore
                                      if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
                                        s0 = peg$c26;
// @ts-ignore
                                        peg$currPos++;
// @ts-ignore
                                      } else {
// @ts-ignore
                                        s0 = peg$FAILED;
// @ts-ignore
                                        if (peg$silentFails === 0) { peg$fail(peg$e27); }
                                      }
// @ts-ignore
                                      if (s0 === peg$FAILED) {
// @ts-ignore
                                        if (input.charCodeAt(peg$currPos) === 58) {
// @ts-ignore
                                          s0 = peg$c27;
// @ts-ignore
                                          peg$currPos++;
// @ts-ignore
                                        } else {
// @ts-ignore
                                          s0 = peg$FAILED;
// @ts-ignore
                                          if (peg$silentFails === 0) { peg$fail(peg$e28); }
                                        }
// @ts-ignore
                                        if (s0 === peg$FAILED) {
// @ts-ignore
                                          if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
                                            s0 = peg$c28;
// @ts-ignore
                                            peg$currPos++;
// @ts-ignore
                                          } else {
// @ts-ignore
                                            s0 = peg$FAILED;
// @ts-ignore
                                            if (peg$silentFails === 0) { peg$fail(peg$e29); }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsenull_transition() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = '';
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s1 = peg$f5();
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinteger_digit() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f6(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseinteger() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s2 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        if (peg$r1.test(input.charAt(peg$currPos))) {
// @ts-ignore
          s2 = input.charAt(peg$currPos);
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f7(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseascii() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r2.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsereserved_character() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r3.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseunreserved_character() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (peg$r4.test(input.charAt(peg$currPos))) {
// @ts-ignore
      s0 = input.charAt(peg$currPos);
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseis_escaped() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 92) {
// @ts-ignore
      s1 = peg$c9;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseescaped_primitive();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f8(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parserange_ascii() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsehexadecimal_ascii();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseis_escaped();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
        s2 = peg$c28;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parsehexadecimal_ascii();
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          if (peg$r0.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s3 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
// @ts-ignore
          if (s3 === peg$FAILED) {
// @ts-ignore
            s3 = peg$parseis_escaped();
          }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = peg$currPos;
// @ts-ignore
          s4 = peg$f9(s1, s3);
// @ts-ignore
          if (s4) {
// @ts-ignore
            s4 = undefined;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s0 = peg$f10(s1, s3);
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsehexadecimal_ascii() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c29) {
// @ts-ignore
      s1 = peg$c29;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$currPos;
// @ts-ignore
      s3 = [];
// @ts-ignore
      if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
        s4 = input.charAt(peg$currPos);
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        if (s3.length >= 2) {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
        } else {
// @ts-ignore
          if (peg$r5.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s4 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
        }
      }
// @ts-ignore
      if (s3.length < 2) {
// @ts-ignore
        peg$currPos = s2;
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = s3;
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f11(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseprimitive() {
// @ts-ignore
    var s0, s1;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsehexadecimal_ascii();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = peg$parseis_escaped();
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = peg$parseunreserved_character();
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f12(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsegroup() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s1 = peg$c18;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c30) {
// @ts-ignore
        s2 = peg$c30;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c31) {
// @ts-ignore
          s3 = peg$c31;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          s4 = [];
// @ts-ignore
          if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
            s5 = input.charAt(peg$currPos);
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s5 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e38); }
          }
// @ts-ignore
          if (s5 !== peg$FAILED) {
// @ts-ignore
            while (s5 !== peg$FAILED) {
// @ts-ignore
              s4.push(s5);
// @ts-ignore
              if (peg$r6.test(input.charAt(peg$currPos))) {
// @ts-ignore
                s5 = input.charAt(peg$currPos);
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s5 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e38); }
              }
            }
// @ts-ignore
          } else {
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
          if (s4 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
              s5 = peg$c25;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s5 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e26); }
            }
// @ts-ignore
            if (s5 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s2;
// @ts-ignore
              s2 = peg$f13(s4);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s2;
// @ts-ignore
              s2 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s2;
// @ts-ignore
          s2 = peg$FAILED;
        }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseany_element();
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$parseany_element();
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
        s4 = peg$c19;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f14(s2, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselookaround() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c32) {
// @ts-ignore
      s1 = peg$c32;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
        s2 = peg$c24;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
        s3 = peg$c22;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
// @ts-ignore
      if (s3 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
          s3 = peg$c23;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$parseany_element();
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$parseany_element();
        }
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s5 = peg$c19;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f15(s2, s3, s4);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseoption() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$currPos;
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = [];
// @ts-ignore
    s4 = peg$parseto_option();
// @ts-ignore
    while (s4 !== peg$FAILED) {
// @ts-ignore
      s3.push(s4);
// @ts-ignore
      s4 = peg$parseto_option();
    }
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 124) {
// @ts-ignore
        s4 = peg$c26;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s4 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s4 = [];
// @ts-ignore
        s5 = peg$parseto_option();
// @ts-ignore
        while (s5 !== peg$FAILED) {
// @ts-ignore
          s4.push(s5);
// @ts-ignore
          s5 = peg$parseto_option();
        }
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = s4;
      }
    }
// @ts-ignore
    if (s2.length < 2) {
// @ts-ignore
      peg$currPos = s1;
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = s2;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f16(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseoptional() {
// @ts-ignore
    var s0, s1, s2;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseto_optional();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
        s2 = peg$c13;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f17(s1);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseiteration() {
// @ts-ignore
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseto_iterate();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
        s2 = peg$c12;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
          s2 = peg$c11;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
            s3 = peg$c20;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s3 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            s4 = peg$parseinteger();
// @ts-ignore
            if (s4 !== peg$FAILED) {
// @ts-ignore
              s5 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
                s6 = peg$c33;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e40); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                s7 = peg$currPos;
// @ts-ignore
                s8 = peg$currPos;
// @ts-ignore
                s9 = peg$parseinteger();
// @ts-ignore
                if (s9 === peg$FAILED) {
// @ts-ignore
                  s9 = null;
                }
// @ts-ignore
                s8 = input.substring(s8, peg$currPos);
// @ts-ignore
                peg$savedPos = peg$currPos;
// @ts-ignore
                s9 = peg$f18(s1, s4, s8);
// @ts-ignore
                if (s9) {
// @ts-ignore
                  s9 = undefined;
// @ts-ignore
                } else {
// @ts-ignore
                  s9 = peg$FAILED;
                }
// @ts-ignore
                if (s9 !== peg$FAILED) {
// @ts-ignore
                  s7 = s8;
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s7;
// @ts-ignore
                  s7 = peg$FAILED;
                }
// @ts-ignore
                if (s7 === peg$FAILED) {
// @ts-ignore
                  s7 = null;
                }
// @ts-ignore
                peg$savedPos = s5;
// @ts-ignore
                s5 = peg$f19(s1, s4, s7);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s5;
// @ts-ignore
                s5 = peg$FAILED;
              }
// @ts-ignore
              if (s5 === peg$FAILED) {
// @ts-ignore
                s5 = null;
              }
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
                s6 = peg$c21;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s6 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
// @ts-ignore
              if (s6 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s2;
// @ts-ignore
                s2 = peg$f20(s1, s4, s5);
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s2;
// @ts-ignore
                s2 = peg$FAILED;
              }
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s2;
// @ts-ignore
              s2 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s2;
// @ts-ignore
            s2 = peg$FAILED;
          }
        }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 63) {
// @ts-ignore
          s3 = peg$c13;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s3 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
// @ts-ignore
        if (s3 === peg$FAILED) {
// @ts-ignore
          s3 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f21(s1, s2, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parselist() {
// @ts-ignore
    var s0, s1, s2, s3, s4;

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c14;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
        s2 = peg$c15;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
// @ts-ignore
      if (s2 === peg$FAILED) {
// @ts-ignore
        s2 = null;
      }
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$parseto_list();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        while (s4 !== peg$FAILED) {
// @ts-ignore
          s3.push(s4);
// @ts-ignore
          s4 = peg$parseto_list();
        }
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
          s4 = peg$c16;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e17); }
        }
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f22(s2, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseEOS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 36) {
// @ts-ignore
      s0 = peg$c17;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSOS() {
// @ts-ignore
    var s0;

// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
      s0 = peg$c15;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

// @ts-ignore
    return s0;
  }


// @ts-ignore
    const States = {
// @ts-ignore
    	END: 0x0,
// @ts-ignore
        NULL: 0x1,
// @ts-ignore
        ROOT: 0x2,
// @ts-ignore
        PRIMITIVE: 0x4,
// @ts-ignore
        OPTION: 0x8,
// @ts-ignore
        OPTION_END: 0x10,
// @ts-ignore
        ITERATION_ZERO: 0x20,
// @ts-ignore
        ITERATION_ONE: 0x40,
// @ts-ignore
        ITERATION_RANGE: 0x80,
// @ts-ignore
        ITERATION_END: 0x100,
// @ts-ignore
        GROUP: 0x200,
// @ts-ignore
        OPTIONAL: 0x400,
// @ts-ignore
        P_LIST: 0x800,
// @ts-ignore
        N_LIST: 0x1000,
// @ts-ignore
        LIST_END: 0x2000
    };
    
// @ts-ignore
    const Modifiers = {
// @ts-ignore
        NONE: 0x0,
// @ts-ignore
    	g: 0x1,
// @ts-ignore
        m: 0x2,
// @ts-ignore
        i: 0x4,
// @ts-ignore
        y: 0x8,
// @ts-ignore
        u: 0x10,
// @ts-ignore
        v: 0x20,
// @ts-ignore
        s: 0x40,
// @ts-ignore
        d: 0x80
    }
    
// @ts-ignore
    const Flags = {
// @ts-ignore
        NONE: 0x1,
// @ts-ignore
        DEFAULT: 0x2
    }
    
    
// @ts-ignore
    class ParserHandler {
// @ts-ignore
        handle(data, elements, state, flags=Flags.DEFAULT) 
        {
// @ts-ignore
        	let pointer = 0;
// @ts-ignore
            let offset = 0;
// @ts-ignore
        	let outputElements = this.buildElement(state, data);
            
// @ts-ignore
            if(outputElements?.AST?.children !== undefined)
            {
// @ts-ignore
            	elements.forEach(element => {
// @ts-ignore
                	if(state & States.OPTION)
                    {
// @ts-ignore
                		outputElements.AST.children.push([...element.map(el => el.AST)]);
                    }
// @ts-ignore
                    else 
// @ts-ignore
                    	outputElements.AST.children.push(element.AST);
                });
            }
            
// @ts-ignore
            if(flags & Flags.DEFAULT)
// @ts-ignore
            	this.addTransitionToElement(outputElements.NFA[pointer], null, ++pointer);
                
// @ts-ignore
            if(state & States.PRIMITIVE)
// @ts-ignore
            	this.addTransitionToElement(outputElements.NFA[pointer], outputElements.NFA[pointer].ASTelement.chr, ++pointer); 
                
// @ts-ignore
            if(state & States.OPTIONAL)
// @ts-ignore
            	this.handleOptionalBefore(outputElements.NFA, elements);
                
// @ts-ignore
            if(state & States.OPTION)
            {
// @ts-ignore
            	this.handleOptionBefore(outputElements.NFA, elements);
// @ts-ignore
                return outputElements;
            }
    		
// @ts-ignore
            if(state & (States.P_LIST | States.N_LIST))
            {
// @ts-ignore
            	this.handleListBefore(outputElements.NFA, elements, state);
// @ts-ignore
                return outputElements;
    		}
            
// @ts-ignore
            elements.forEach(element => {
// @ts-ignore
                outputElements.NFA.push(...element.NFA);
            });
            
// @ts-ignore
            if(state & States.ROOT)
// @ts-ignore
            	this.handleRootAfter(outputElements.NFA);

// @ts-ignore
            if(state & States.GROUP)
// @ts-ignore
                this.handleGroupAfter(outputElements.NFA);

// @ts-ignore
            if(state & (States.ITERATION_ZERO | States.ITERATION_ONE))
// @ts-ignore
                this.handleIterationAfter(outputElements.NFA, state);
                
// @ts-ignore
            return outputElements;
        }
        
// @ts-ignore
        handleRootAfter(outputNFA){
// @ts-ignore
        	outputNFA.push(this.buildElement(States.END).NFA[0]);

            // DEBUG
// @ts-ignore
            /*outputNFA.forEach(element => {
// @ts-ignore
            	if(element != 0) element.ASTelement = undefined;
            });*/
        }
        
// @ts-ignore
        handleOptionBefore(outputNFA, elements)
        {
// @ts-ignore
        	let offset = 1;
// @ts-ignore
            let toEnd = 0;
// @ts-ignore
            const sumLength = elements.reduce((x, y) => 
// @ts-ignore
            	x + y.reduce((a,b) => a + b.NFA.length, 1)
            , 0);
            
// @ts-ignore
        	elements.forEach((option, id) => {
// @ts-ignore
                this.addTransitionToElement(outputNFA[0], null, offset);
                
// @ts-ignore
                toEnd = sumLength - offset;
// @ts-ignore
                option.forEach(element => {
// @ts-ignore
                	outputNFA.push(...element.NFA);
// @ts-ignore
                    toEnd -= element.NFA.length;
// @ts-ignore
                    offset += element.NFA.length;
                });
// @ts-ignore
                offset++;
// @ts-ignore
                toEnd++;
                
// @ts-ignore
                outputNFA.push(this.buildNFAwhithoutASTref(States.OPTION_END, [
// @ts-ignore
                    [null, toEnd]
                ]));
            });
        }
        
// @ts-ignore
        handleOptionalBefore(outputNFA, elements)
        {
// @ts-ignore
        	const sumLength = elements.reduce((x, y) => x + (Array.isArray(y.NFA) ? y.NFA.length : 1), 0);
// @ts-ignore
        	this.addTransitionToElement(outputNFA[0], null, sumLength + 1);
        }
        
// @ts-ignore
        handleListBefore(outputNFA, elements, state)
        {
// @ts-ignore
        	outputNFA.push(this.buildElement(States.LIST_END).NFA[0]);
// @ts-ignore
            this.addTransitionToElement(outputNFA[1], null, 1);

// @ts-ignore
            outputNFA[0].transitions = new Set();
            
// @ts-ignore
        	if(state & States.P_LIST)
            {
// @ts-ignore
                elements.forEach((element) => {
// @ts-ignore
                	if(Array.isArray(element))
                    {
// @ts-ignore
                    	element.forEach((str) => {
// @ts-ignore
                        	outputNFA[0].transitions.add(str);
                        });
// @ts-ignore
                        return;
                    }
// @ts-ignore
                	this.addTransitionToElement(outputNFA[0], element, 1);
                });
// @ts-ignore
                return;
            }
            
// @ts-ignore
            let mapCharacters = [];
            
// @ts-ignore
            for(let i = 0; i < 256; i++)
// @ts-ignore
            	mapCharacters.push(String.fromCharCode(i));
            
// @ts-ignore
            elements.forEach(element => {
// @ts-ignore
            	if(Array.isArray(element))
                {
// @ts-ignore
                    element.forEach((str) => {
// @ts-ignore
                      	const code = str.charCodeAt(0);
// @ts-ignore
                    	mapCharacters[code] = undefined;
                    });
// @ts-ignore
                    return;
                }
// @ts-ignore
            	const code = element.charCodeAt(0);
// @ts-ignore
                mapCharacters[code] = undefined;
            });
            
// @ts-ignore
            const excluded = mapCharacters.filter(x => x != undefined);

// @ts-ignore
            excluded.forEach((element) => {
// @ts-ignore
            	outputNFA[0].transitions.add(element);
            });
        }
        
// @ts-ignore
        handleIterationAfter(outputNFA, state)
        {
// @ts-ignore
        	const dataLength = outputNFA.length;
        
// @ts-ignore
        	outputNFA.push(
// @ts-ignore
                this.buildNFAwhithoutASTref(States.ITERATION_END, [
// @ts-ignore
                    [null, -dataLength + 1],
// @ts-ignore
                    [null, 1]
                ])
            );

// @ts-ignore
            if(state & States.ITERATION_ZERO)
// @ts-ignore
            	this.addTransitionToElement(outputNFA[0], null, outputNFA.length);
        }
        
// @ts-ignore
        handleGroupAfter(outputNFA)
        {
// @ts-ignore
        	outputNFA[0].ASTelement.endNFA = outputNFA.length - 1;
        }

// @ts-ignore
        buildElement(type, data={}, transitions = []) 
        {
// @ts-ignore
        	let AST = {
// @ts-ignore
                type,
// @ts-ignore
            	start: range().start,
// @ts-ignore
                end: range().end,
// @ts-ignore
                ...data
            };
        
// @ts-ignore
        	if(type & ~(States.NULL | States.PRIMITIVE | States.P_LIST | States.N_LIST | States.LIST_END))
// @ts-ignore
        		AST.children = []
        
// @ts-ignore
        	let element = {
// @ts-ignore
                AST,
// @ts-ignore
                NFA: []
            };
            
// @ts-ignore
            element.NFA.push({ASTelement: element.AST, transitions});
            
// @ts-ignore
            return element;
        }
        
// @ts-ignore
        buildNFAwhithoutASTref(type, transitions = [])
        {
// @ts-ignore
        	return { transitions };
        }
        
// @ts-ignore
        addTransitionToElement(element, input, by){
// @ts-ignore
        	if(element.transitions === undefined) 
// @ts-ignore
            	element.transitions = [];
                
// @ts-ignore
            element.transitions.push([input, by]);
            
// @ts-ignore
            return element;
        }
    }
    
// @ts-ignore
    const handler = new ParserHandler();

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

// @ts-ignore
  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "start";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "start" ? Start : Start
    : Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = RegexTypes.RootState;
export type GeneralStart = { modifiers: number; elements: AnyElement[] };
export type ModedStart = { modifiers: Modifiers; elements: AnyElement[] };
export type Modifiers = number;
export type General = List | Primitive | Lookaround | Group | EOS | SOS;
export type AnyElement = Option | Iteration | Optional | General;
export type ToIterate = Primitive | Group | List;
export type ToOption = Iteration | Optional | General;
export type ToOptional = Primitive | Group | List;
export type ToList = RangeAscii | HexadecimalAscii | string | IsEscaped;
export type EscapedPrimitive =
  | "\\"
  | "."
  | "+"
  | "*"
  | "?"
  | "["
  | "^"
  | "]"
  | "$"
  | "("
  | ")"
  | "{"
  | "}"
  | "="
  | "!"
  | "<"
  | ">"
  | "|"
  | ":"
  | "-";
export type NullTransition = {
  AST: { type: any; start: number; end: number };
  NFA: never[];
};
export type IntegerDigit = number;
export type Integer = number;
export type Ascii = string;
export type ReservedCharacter = string;
export type UnreservedCharacter = string;
export type IsEscaped = EscapedPrimitive;
export type RangeAscii = string[];
export type HexadecimalAscii = string;
export type Primitive = RegexTypes.PrimitiveState;
export type Group = RegexTypes.GroupState;
export type Lookaround = {
  type: "lookaround";
  detailedType: string;
  elements: AnyElement[];
};
export type Option = RegexTypes.OptionState;
export type Optional = RegexTypes.OptionalState;
export type Iteration = RegexTypes.IterationState;
export type List = RegexTypes.ListState;
export type EOS = "$";
export type SOS = "^";
